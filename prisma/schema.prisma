generator client {
  provider        = "prisma-client"
  output          = "../.generated/prisma"
  previewFeatures = ["relationJoins", "queryCompiler", "driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//
// ENUMS
//
enum Unit {
  PCS
  GRAM
  KG
  ML
  L
  PACK
  BAG
}

enum StoreKey {
  ALBERT_HEIJN
  JUMBO
}

enum UserRole {
  ADMIN
  USER
}

//
// USERS & LISTS
//
model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  sessionId String?
  role      UserRole @default(USER)

  lists       UsersOnLists[]
  addedItems  GroceryItem[]  @relation("AddedItems")
  boughtItems GroceryItem[]  @relation("BoughtItems")
}

model GroceryList {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users UsersOnLists[]
  items GroceryItem[]
}

model UsersOnLists {
  role   String? // e.g. "owner", "editor", "viewer"
  userId Int
  user   User        @relation(fields: [userId], references: [id])
  listId Int
  list   GroceryList @relation(fields: [listId], references: [id])

  @@id([userId, listId])
}

//
// GROCERY ITEMS
//
model GroceryItem {
  id        Int         @id @default(autoincrement())
  listId    Int
  list      GroceryList @relation(fields: [listId], references: [id])
  productId Int
  product   Product     @relation(fields: [productId], references: [id])

  // optional: user can specify a preferred variant (brand)
  variantId Int?
  variant   ProductVariant? @relation(fields: [variantId], references: [id])

  quantity Float
  unit     Unit
  price    Float?

  checkedOff Boolean @default(false)
  notes      String?

  addedById  Int?
  addedBy    User? @relation("AddedItems", fields: [addedById], references: [id])
  boughtById Int?
  boughtBy   User? @relation("BoughtItems", fields: [boughtById], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  boughtAt  DateTime?
}

//
// PRODUCTS
//
model Product {
  id          Int      @id @default(autoincrement())
  name        String // generic: "Milk 1L"
  otherNames  String[]
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tags         TagsOnProducts[]
  images       ProductImage[]
  variants     ProductVariant[]
  groceryItems GroceryItem[]
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  url       String
  productId Int
  product   Product @relation(fields: [productId], references: [id])
}

model ProductTag {
  id       Int              @id @default(autoincrement())
  name     String
  type     String? // e.g. "category", "diet", "allergen"
  products TagsOnProducts[]
}

model TagsOnProducts {
  productId Int
  tagId     Int
  product   Product    @relation(fields: [productId], references: [id])
  tag       ProductTag @relation(fields: [tagId], references: [id])

  @@id([productId, tagId])
}

model ProductSource {
  id        Int            @id @default(autoincrement())
  url       String?
  price     Float?
  storeKey  StoreKey
  variantId Int
  variant   ProductVariant @relation(fields: [variantId], references: [id])
}

model ProductVariant {
  id        Int     @id @default(autoincrement())
  name      String // e.g. "Albert Heijn Halfvolle Melk"
  brand     String? // e.g. "Campina", "Albert Heijn"
  productId Int
  product   Product @relation(fields: [productId], references: [id])

  images       ProductVariantImage[]
  sources      ProductSource[]
  groceryItems GroceryItem[]
}

model ProductVariantImage {
  id        Int            @id @default(autoincrement())
  url       String
  variantId Int
  variant   ProductVariant @relation(fields: [variantId], references: [id])
}
